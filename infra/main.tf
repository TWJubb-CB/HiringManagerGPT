terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.aws_region
}


resource "aws_key_pair" "ec2key" {
  key_name   = var.ec2_keypair_name
  public_key = file("~/.ssh/${var.ec2_keypair_name}.pub")
}

# creating an encryption key
resource "null_resource" "generate_secret" {
  provisioner "local-exec" {
    command = "bash -c 'source /opt/homebrew/anaconda3/etc/profile.d/conda.sh && conda activate ${var.conda_env_name} && python3 ../app/create_aws_key.py > encryption_key.txt'"
  }
}

data "local_file" "script_output" {
  depends_on = [null_resource.generate_secret]
  filename   = "encryption_key.txt"
}

resource "aws_ssm_parameter" "secret_key" {
  depends_on  = [data.local_file.script_output]
  name        = var.OPENAI_API_KEY_NAME
  description = "Secret key generated by Python script"
  type        = "SecureString"
  value       = data.local_file.script_output.content
}


resource "aws_iam_role" "ec2_ssm_role" {
  name = "EC2SSMRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
        Action = "sts:AssumeRole"
      }
    ]
  })
}

# policy to allow EC2 to retrieve parameters from SSM
resource "aws_iam_policy" "ssm_read_policy" {
  name        = "EC2SSMReadPolicy"
  description = "Allows EC2 instances to read parameters from SSM Parameter Store"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect   = "Allow"
        Action   = [
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath"
        ]
        # allow access to all SSM parameters (you can further restrict this)
        Resource = "arn:aws:ssm:*:*:parameter/*"
      }
    ]
  })
}

# Attach the policy to the IAM role
resource "aws_iam_role_policy_attachment" "attach_ssm_policy" {
  policy_arn = aws_iam_policy.ssm_read_policy.arn
  role       = aws_iam_role.ec2_ssm_role.name
}


resource "aws_iam_instance_profile" "ec2_ssm_profile" {
  name = "EC2SSMInstanceProfile"
  role = aws_iam_role.ec2_ssm_role.name
}


resource "aws_instance" "web" {
  ami           = var.ami_id
  instance_type = var.instance_type
  key_name      = aws_key_pair.ec2key.key_name
  security_groups = [aws_security_group.web_sg.name]

  provisioner "file" {
    source      = "./../app"
    destination = "/home/ubuntu/app"
    connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = file("~/.ssh/${aws_key_pair.ec2key.key_name}")
      host        = self.public_ip
    }
  }

  user_data = templatefile("user_data.sh", {encoder_key=var.OPENAI_ENC_KEY,
    keyname=var.OPENAI_API_KEY_NAME})

  iam_instance_profile = aws_iam_instance_profile.ec2_ssm_profile.name

  tags = {
    Name = "Terraform-Nginx-Server"
  }
}

resource "aws_eip_association" "my_eip_assoc" {
  instance_id   = aws_instance.web.id
  allocation_id = var.elastic_ip_id
}

resource "aws_security_group" "web_sg" {
  name        = "nginx-sg"
  description = "Allow HTTP and SSH"

  # SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # http
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # https
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # gradio server
  ingress {
    from_port   = 7860
    to_port     = 7860
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

output "public_ip" {
  value = aws_instance.web.public_ip
}
